聊天室思路分析

1. 需求分析 ：  干什么，达到什么效果

2. 技术点确定

   * 数据如何发送
      转发： 客户端发出-->服务器-->转发给其他用户

   * 网络模型如何构建
      udp网络模型

   * 用户信息怎么维护
      服务端保存：什么地方会用，需要什么特征，存什么
            列表  [(name,address),]
            字典  {name:address}
            链表  class Node:
                     def __init__(self,name,address,next):
                        pass

   * 聊天室的随意收发怎么处理
     多进程分别进行收发操作

3. 结构设计

   封装设计 ： 函数式编程

   功能模块划分：  网络结构搭建
                进入聊天室
                聊天
                退出聊天室
                管理员消息

4. 每个功能客户端和服务端分别做什么

   * 网络功能搭建
   * 进入聊天室
       客户端  * 输入姓名
              * 给服务器发请求
              * 接收反馈结果
              * 如果不允许进入则重复输入姓名

       服务端  * 接收请求，判断请求类型
              * 判断用户名是否存在
              * 反馈结果
              * 如果允许进入，保存用户信息，通知其他人

   * 聊天
       客户端： * 创建新的进程
               * 一个进程收消息
               * 一个进程发消息

       服务端： * 接收请求，判断请求类型
               * 将消息转发给其他人

   * 退出
       客户端： * 输入quit或者 X 表示退出
              * 发送请求给服务器
              * 结束进程

       服务端:  * 接收请求，判断请求类型
               * 删除用户
               * 将退出信息告知其他人

5. 通信协议
   登录 ：  L name    OK 表示可以登录
   聊天 ：  C name xxxxxxxx
   退出 ：  Q name








